// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-kafka/source (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -destination franz_mock.go -package source -mock_names=Client=MockClient . Client
//

// Package source is a generated GoMock package.
package source

import (
	context "context"
	reflect "reflect"

	kgo "github.com/twmb/franz-go/pkg/kgo"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *MockClientCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
	return &MockClientCloseCall{Call: call}
}

// MockClientCloseCall wrap *gomock.Call
type MockClientCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCloseCall) Return() *MockClientCloseCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCloseCall) Do(f func()) *MockClientCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCloseCall) DoAndReturn(f func()) *MockClientCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CommitRecords mocks base method.
func (m *MockClient) CommitRecords(ctx context.Context, rs ...*kgo.Record) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitRecords", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitRecords indicates an expected call of CommitRecords.
func (mr *MockClientMockRecorder) CommitRecords(ctx any, rs ...any) *MockClientCommitRecordsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitRecords", reflect.TypeOf((*MockClient)(nil).CommitRecords), varargs...)
	return &MockClientCommitRecordsCall{Call: call}
}

// MockClientCommitRecordsCall wrap *gomock.Call
type MockClientCommitRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCommitRecordsCall) Return(arg0 error) *MockClientCommitRecordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCommitRecordsCall) Do(f func(context.Context, ...*kgo.Record) error) *MockClientCommitRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCommitRecordsCall) DoAndReturn(f func(context.Context, ...*kgo.Record) error) *MockClientCommitRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OptValue mocks base method.
func (m *MockClient) OptValue(opt any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptValue", opt)
	ret0, _ := ret[0].(any)
	return ret0
}

// OptValue indicates an expected call of OptValue.
func (mr *MockClientMockRecorder) OptValue(opt any) *MockClientOptValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptValue", reflect.TypeOf((*MockClient)(nil).OptValue), opt)
	return &MockClientOptValueCall{Call: call}
}

// MockClientOptValueCall wrap *gomock.Call
type MockClientOptValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientOptValueCall) Return(arg0 any) *MockClientOptValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientOptValueCall) Do(f func(any) any) *MockClientOptValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientOptValueCall) DoAndReturn(f func(any) any) *MockClientOptValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PollFetches mocks base method.
func (m *MockClient) PollFetches(ctx context.Context) kgo.Fetches {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollFetches", ctx)
	ret0, _ := ret[0].(kgo.Fetches)
	return ret0
}

// PollFetches indicates an expected call of PollFetches.
func (mr *MockClientMockRecorder) PollFetches(ctx any) *MockClientPollFetchesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollFetches", reflect.TypeOf((*MockClient)(nil).PollFetches), ctx)
	return &MockClientPollFetchesCall{Call: call}
}

// MockClientPollFetchesCall wrap *gomock.Call
type MockClientPollFetchesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientPollFetchesCall) Return(arg0 kgo.Fetches) *MockClientPollFetchesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientPollFetchesCall) Do(f func(context.Context) kgo.Fetches) *MockClientPollFetchesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientPollFetchesCall) DoAndReturn(f func(context.Context) kgo.Fetches) *MockClientPollFetchesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
