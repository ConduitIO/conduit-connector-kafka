// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package source

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigCaCert               = "caCert"
	ConfigClientCert           = "clientCert"
	ConfigClientID             = "clientID"
	ConfigClientKey            = "clientKey"
	ConfigGroupID              = "groupID"
	ConfigInsecureSkipVerify   = "insecureSkipVerify"
	ConfigReadFromBeginning    = "readFromBeginning"
	ConfigRetryGroupJoinErrors = "retryGroupJoinErrors"
	ConfigSaslMechanism        = "saslMechanism"
	ConfigSaslPassword         = "saslPassword"
	ConfigSaslUsername         = "saslUsername"
	ConfigServers              = "servers"
	ConfigTlsEnabled           = "tls.enabled"
	ConfigTopic                = "topic"
	ConfigTopics               = "topics"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigCaCert: {
			Default:     "",
			Description: "CACert is the Kafka broker's certificate.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigClientCert: {
			Default:     "",
			Description: "ClientCert is the Kafka client's certificate.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigClientID: {
			Default:     "conduit-connector-redpanda",
			Description: "ClientID is a unique identifier for client connections established by\nthis connector.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigClientKey: {
			Default:     "",
			Description: "ClientKey is the Kafka client's private key.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigGroupID: {
			Default:     "",
			Description: "GroupID defines the consumer group id.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigInsecureSkipVerify: {
			Default:     "",
			Description: "InsecureSkipVerify defines whether to validate the broker's certificate\nchain and host name. If 'true', accepts any certificate presented by the\nserver and any host name in that certificate.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigReadFromBeginning: {
			Default:     "",
			Description: "ReadFromBeginning determines from whence the consumer group should begin\nconsuming when it finds a partition without a committed offset. If this\noptions is set to true it will start with the first message in that\npartition.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigRetryGroupJoinErrors: {
			Default:     "true",
			Description: "RetryGroupJoinErrors determines whether the connector will continually retry on group join errors.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigSaslMechanism: {
			Default:     "",
			Description: "Mechanism configures the connector to use SASL authentication. If\nempty, no authentication will be performed.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"PLAIN", "SCRAM-SHA-256", "SCRAM-SHA-512"}},
			},
		},
		ConfigSaslPassword: {
			Default:     "",
			Description: "Password sets up the password used with SASL authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigSaslUsername: {
			Default:     "",
			Description: "Username sets up the username used with SASL authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigServers: {
			Default:     "",
			Description: "Servers is a list of Kafka bootstrap servers, which will be used to\ndiscover all the servers in a cluster.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigTlsEnabled: {
			Default:     "",
			Description: "TLSEnabled defines whether TLS is needed to communicate with the Kafka cluster.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigTopic: {
			Default:     "",
			Description: "Topic {WARN will be deprecated soon} the kafka topic to read from.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigTopics: {
			Default:     "",
			Description: "Topics is a comma separated list of Kafka topics to read from.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
	}
}
