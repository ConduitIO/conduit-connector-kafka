// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-connector-sdk/tree/main/cmd/paramgen

package destination

import "github.com/conduitio/conduit-commons/config"

func (Config) Parameters() config.Parameters {
	return map[string]config.Parameter{
		"acks": {
			Default:     "all",
			Description: "acks defines the number of acknowledges from partition replicas required before receiving a response to a produce request. None = fire and forget, one = wait for the leader to acknowledge the writes, all = wait for the full ISR to acknowledge the writes.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"none", "one", "all"}},
			},
		},
		"batchBytes": {
			Default:     "1000012",
			Description: "batchBytes limits the maximum size of a request in bytes before being sent to a partition. This mirrors Kafka's max.message.bytes.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		"caCert": {
			Default:     "",
			Description: "caCert is the Kafka broker's certificate.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"clientCert": {
			Default:     "",
			Description: "clientCert is the Kafka client's certificate.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"clientID": {
			Default:     "conduit-connector-kafka",
			Description: "clientID is a unique identifier for client connections established by this connector.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"clientKey": {
			Default:     "",
			Description: "clientKey is the Kafka client's private key.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"compression": {
			Default:     "snappy",
			Description: "compression set the compression codec to be used to compress messages.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"none", "gzip", "snappy", "lz4", "zstd"}},
			},
		},
		"deliveryTimeout": {
			Default:     "",
			Description: "deliveryTimeout for write operation performed by the Writer.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		"insecureSkipVerify": {
			Default:     "",
			Description: "insecureSkipVerify defines whether to validate the broker's certificate chain and host name. If 'true', accepts any certificate presented by the server and any host name in that certificate.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		"saslMechanism": {
			Default:     "",
			Description: "saslMechanism configures the connector to use SASL authentication. If empty, no authentication will be performed.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"PLAIN", "SCRAM-SHA-256", "SCRAM-SHA-512"}},
			},
		},
		"saslPassword": {
			Default:     "",
			Description: "saslPassword sets up the password used with SASL authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"saslUsername": {
			Default:     "",
			Description: "saslUsername sets up the username used with SASL authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"servers": {
			Default:     "",
			Description: "servers is a list of Kafka bootstrap servers, which will be used to discover all the servers in a cluster.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		"tls.enabled": {
			Default:     "",
			Description: "tls.enabled defines whether TLS is needed to communicate with the Kafka cluster.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		"topic": {
			Default:     "{{ index .Metadata \"opencdc.collection\" }}",
			Description: "topic is the Kafka topic. It can contain a [Go template](https://pkg.go.dev/text/template) that will be executed for each record to determine the topic. By default, the topic is the value of the `opencdc.collection` metadata field.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
	}
}
